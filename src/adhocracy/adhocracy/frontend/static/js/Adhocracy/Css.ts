// private dictionary that contains a complete list of all css class
// names used anywhere in the adhocracy javascript code.  each name is
// mapped to a documentation string that explains what happens to the
// class in the js code.  documentation about layout should be found
// in the css rules.
//
// there are some cases in which this approach may be challenged:
//   - external js libraries
//   - user content (entered in an HTML-editor inside the application)
//   - embedded 3rd-party dom-subtrees
//
// in principle, we can always keep adding classes what we want to use
// in the code to the dictionary, even if they are coming from
// external libraries.  if this approach gets too hairy, we can add
// more dictionaries and search all of them instead of the one.
var dict = {
    "edit_button": "switch changeable object from display to edit mode",
    "display_button": "switch changeable object from edit to display mode",
    "reset_button": "undo all changes since last save (do not toggle between edit and display mode)",
    "save_button": "save changes and change to display mode",
    "document_header": "marker class for div containing P_IDocument title and description.",
    "create_proposal_button": "button for adding proposal to a pool",
    "create_paragraph_button": "button for adding a paragraph to a document",
    "edit_document_title": "edit textarea for document title",
    "edit_document_description": "edit textarea for document description",
    "__widget__": "adhocracy default layout"};

// All class names in the js code must be generated by calls to this
// function.  If the class is in the dict, the return value is
// trivially the argument, so there is no direct impact on the
// application behavior.  But:
//
//   1. If we want to find all class names used anywhere in the js
//   code, we just need to look at the dict(s) mentioned in this
//   function.
//
//   2. If we want to remove a class name from all occurrances in the
//   code, we just need to remove it here, call the test suite, and
//   follow the error messages.
//
// which kinds of dead are there?
//
// used in     template    javascript  css         dead?
//              X           -           -           Y
//              -           X           -           ?
//              -           -           X           Y
//              X           X           -           N
//              X           -           X           N
//              -           X           X           N
//              X           X           X           N
//
// (in general, we want to report statistics on all these cases.)
export function cls(className) {
    "use strict";

    if (className in dict) {
        return className;
    } else {
        throw ("unknown cssClass: " + className);
    }
};

export function clsd(className) {
    "use strict";

    if (className in dict) {
        return ("." + className);
    } else {
        throw ("unknown cssClass: " + className);
    }
};

// Return the documentation associated with a class name, not the name
// itself.  (Not sure whether this is all that useful?)
export function cssClassDescription(className) {
    "use strict";

    if (className in dict) {
        return dict[className];
    } else {
        throw ("unknown cssClass: " + className);
    }
};

// Return all registered class names in an array.
export function cssAllClassNames() {
    "use strict";

    Object.keys(dict);
};
