from substanced.schema import (
    NameSchemaNode
)
from zope.interface import (
    Interface,
    taggedValue,
)
from zope.interface.interfaces import IInterface
from adhocracy.schema import ReferenceSetSchemaNode

import colander


class IIProperty(IInterface):

    """Mark IProperty class to allow registering a MultiAdapter.

    See adhocracy.properties.includme for examples.

    """


class IProperty(Interface):

    """Marker interface with tagged values to define resource data."""

    taggedValue("schema", "substanced.schema.Schema")
    """Reference colander data schema.

    This schema has to define the facade to work with this resource.
    To set/get the data you can adapt to IPropertySheet objects.

    Subtype has to override.

    """
    taggedValue("key", "")
    """Key to store the schema data, defaults to IProperyXY.__identifier__"""
    taggedValue("permission_view", "view")
    """Permission to view or index this data. Subtype should override."""
    taggedValue("permission_edit", "edit")
    """Permission to edit this data. Subtype should override."""


class IName(IProperty):

    """Set human readable name of this resource and create identifier."""

    taggedValue("schema", "adhocracy.properties.interfaces.NameSchema")


class NameSchema(colander.Schema):

    name = NameSchemaNode(default="", missing=colander.drop)


class INameReadOnly(IName):

    """ Same as IName but name is autogenerated."""

    taggedValue("schema", "adhocracy.properties.interfaces.NameReadOnlySchema")


class NameReadOnlySchema(colander.Schema):

    name = NameSchemaNode(readonly=True, default="", missing=colander.drop)


class IPool(IProperty):

    """Get listing with child objects of this resource."""

    taggedValue("schema", "adhocracy.properties.interfaces.PoolSchema")


class PoolSchema(colander.Schema):

    elements = ReferenceSetSchemaNode(default=[],
                                      missing=colander.drop,
                                      interfaces=[Interface],
                                      readonly=True,
                                      )


class IVersionable(IProperty):

    """Make this Fubel a versionable."""

    taggedValue("schema", "adhocracy.properties.interfaces.VersionableSchema")


# class IForkable(IVersionable):
# #     """Marker interface representing a forkable node with version data"""
#
class VersionableSchema(colander.Schema):

    follows = ReferenceSetSchemaNode(default=[],
                                     missing=colander.drop,
                                     interfaces=[IVersionable]
                                     )
    """follows blas"""

# followed_by = ReferenceSetSchemaNode(
#         default=[],
#         missing=colander.drop,
#         interface=IVersionable,
#         readonly=True,
#     )


class IVersions(IProperty):

    """Dag for collecting all versions of one Fubel."""
    taggedValue("schema", "adhocracy.properties.interfaces.VersionsSchema")


class VersionsSchema(colander.Schema):

    elements = ReferenceSetSchemaNode(default=[],
                                      missing=colander.drop,
                                      interface=[IVersionable],
                                      )


class ITags(IProperty):

    """List all tags for this FubelVersionsPool."""

    taggedValue("schema", "adhocracy.properties.interfaces.TagsSchema")


class TagsSchema(colander.Schema):

    elements = ReferenceSetSchemaNode(default=[],
                                      missing=colander.drop,
                                      interface=IVersionable,
                                      )

#
# # Document Data
#
#
# class IDocument(IProperty):
#
#     """Marker interface representing a Fubel with document data """
#
#     taggedValue("schema", "adhocracy.properties.interfaces.DocumentSchema")
#
#
# class DocumentSchema(colander.Schema):
#
#     elements = ReferenceSetSchemaNode(essence_refs=True,
#                                       default=[],
#                                       missing=colander.drop,
#                                       interface=
#                                    "adhocracy.resources.interfaces.ISection")
#
#
# class ISection(IProperty):
#
#     """Marker interface representing a document section """
#
#     taggedValue("schema", "adhocracy.properties.interfaces.SectionSchema")
#
#
# class SectionSchema(colander.Schema):
#     title = colander.SchemaNode(colander.String(), default="")
#     elements = ReferenceSetSchemaNode(essence_refs=True,
#                                       default=[],
#                                       missing=colander.drop,
#                                       interface=

#                                    "adhocracy.resources.interfaces.ISection")
