"""Interfaces for resource propertysheets."""
from zope.interface import (
    Interface,
    taggedValue,
)
from adhocracy.interfaces import IProperty
from adhocracy.schema import (
    ReferenceSetSchemaNode,
    Identifier,
)

import colander


class IName(IProperty):

    """Human readable resource Identifier, used to build object paths."""

    taggedValue('schema', 'adhocracy.properties.interfaces.NameSchema')


class NameSchema(colander.Schema):

    """Colander schema for IName."""

    name = Identifier(default='', missing=colander.drop)


class INameReadOnly(IName):

    """ Same as IName but name is autogenerated."""

    taggedValue('schema', 'adhocracy.properties.interfaces.NameReadOnlySchema')


class NameReadOnlySchema(colander.Schema):

    """Colander schema for INameReadOnly."""

    name = Identifier(readonly=True, default='', missing=colander.drop)


class IPool(IProperty):

    """Get listing with child objects of this resource."""

    taggedValue('schema', 'adhocracy.properties.interfaces.PoolSchema')
    taggedValue('readonly', True)


class PoolSchema(colander.Schema):

    """Colander schema for IPool."""

    elements = ReferenceSetSchemaNode(default=[],
                                      missing=colander.drop,
                                      interfaces=[Interface],
                                      readonly=True,
                                      )


class IVersionable(IProperty):

    """Make this Fubel a versionable."""

    taggedValue('schema', 'adhocracy.properties.interfaces.VersionableSchema')


# class IForkable(IVersionable):
# """Marker interface representing a forkable node with version data"""
#
class VersionableSchema(colander.Schema):

    """Colander schema for IVersionable."""

    follows = ReferenceSetSchemaNode(default=[],
                                     missing=colander.drop,
                                     interfaces=[IVersionable]
                                     )
    """follows blas"""

# followed_by = ReferenceSetSchemaNode(
#         default=[],
#         missing=colander.drop,
#         interface=IVersionable,
#         readonly=True,
#     )


class IVersions(IProperty):

    """Dag for collecting all versions of one Fubel."""

    taggedValue('schema', 'adhocracy.properties.interfaces.VersionsSchema')


class VersionsSchema(colander.Schema):

    """Colander schema for IVersions."""

    elements = ReferenceSetSchemaNode(default=[],
                                      missing=colander.drop,
                                      interface=[IVersionable],
                                      )


class ITags(IProperty):

    """List all tags for this FubelVersionsPool."""

    taggedValue('schema', 'adhocracy.properties.interfaces.TagsSchema')


class TagsSchema(colander.Schema):

    """Colander schema for ITags."""

    elements = ReferenceSetSchemaNode(default=[],
                                      missing=colander.drop,
                                      interface=IVersionable,
                                      )


# Document Data

class IDocument(IProperty):

    """Marker interface representing a Fubel with document data."""

    taggedValue('schema', 'adhocracy.properties.interfaces.DocumentSchema')


class DocumentSchema(colander.Schema):

    """Colander schema for IDocument."""

    elements = ReferenceSetSchemaNode(
        essence_refs=True,
        default=[],
        missing=colander.drop,
        interface='adhocracy.resources.interfaces.ISection')


class ISection(IProperty):

    """Marker interface representing a document section."""

    taggedValue('schema', 'adhocracy.properties.interfaces.SectionSchema')


class SectionSchema(colander.Schema):

    """Colander schema for ISection."""

    title = colander.SchemaNode(colander.String(), default='')
    elements = ReferenceSetSchemaNode(
        essence_refs=True,
        default=[],
        missing=colander.drop,
        interface='adhocracy.resources.interfaces.ISection')
