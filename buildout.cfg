[buildout]
#extensions = mr.developer
#index = http://d.pypi.python.org/simple
allow-hosts = *.python.org
prefer-final = false
show-picked-versions= true
extends =
    versions.cfg
versions = versions
parts =
     dirs
     source_env
     adhocracy
     omelette
     sphinx_documentation
     sphinx_build_adhocracy
     pytest
     tslint
     tslint_shortcut
     flake
     pylint
     remove_double_quotes_in_python_files
     show_forbbiden_imports
     check_code
     pre_commit_hook
     nodejs
     rubygems
     compass
     compass.min
     stylesheets
     hologram
     styleguide
auto-checkout = *
develop =
     src/adhocracy
     src/adhocracy_sample
     src/substanced
     src/rubygemsrecipe

[dirs]
recipe = z3c.recipe.mkdir
paths = var/blobs
        var/uploads_tmp
        var/mail
        var/mail/cur
        var/mail/new
        var/mail/tmp

[source_env]
recipe = collective.recipe.template
input = inline:
   #!/bin/bash
   export PATH=${buildout:bin-directory}:$PATH
output =${buildout:directory}/source_env

[adhocracy]
recipe = zc.recipe.egg
dependent-scripts = true
interpreter = adhocracypy
eggs = adhocracy
       adhocracy_sample
       substanced
       repoze.profile
       requests
       ipdb
       pyramid_chameleon
frontend.static_dir = src/adhocracy/adhocracy/frontend/static

[omelette]
recipe = collective.recipe.omelette
eggs =
    ${flake:eggs}
    ${adhocracy:eggs}

[sphinx_build_adhocracy]
recipe = collective.recipe.template
input = inline:
    #!/bin/bash
    cd ${buildout:directory}/docs/
    rm -rf ${buildout:directory}/docs/doctrees
    make html
output = ${buildout:bin-directory}/sphinx_build_adhocracy
mode = 755

[sphinx_documentation]
recipe = zc.recipe.egg
dependent-scripts = true
eggs = Sphinx
       sphinx-autodoc-annotation
       sphinxcontrib-zopeext
       sphinxcontrib-napoleon
       adhocracy
       adhocracy_sample

[pytest]
# run: bin/py.test -s src/adhocracy src/adhocracy_sample
recipe = zc.recipe.egg
dependent-scripts = false
eggs =
  ipdb
  interlude # open ipdb in doctest: import interlude; interlude.interact(locals())
  pytest
  pytest-cov
  pytest-quickcheck
  adhocracy[testing]
  adhocracy_sample
  requests
  webtest
initialization =
  sys.argv[1:1] = [
                  '--capture=no',
                  '--strict',
                  '--tb=native',
                  '--cov=adhocracy',
                  '--cov-report=html',
                  '--cov-report=term',
                  ]

[flake]
recipe = zc.recipe.egg
eggs =
    flake8
    flake8_docstrings
    flake8-quotes
    pep8-naming

[tslint]
recipe = gp.recipe.node
npms = tslint@0.4.9

[tslint_shortcut]
recipe = collective.recipe.template
input = inline:
    #!/bin/bash
    ret_code=0
    while read line; do
        ${buildout:bin-directory}/tslint -c ${buildout:directory}/etc/tslint.json -f "$line"
        ret_code=$(($ret_code + $?))
    done < <(git ls-files | grep \\.ts$)
    exit $ret_code
output = ${buildout:bin-directory}/tslint_check_adhocracy
mode = 755

[pylint]
recipe = zc.recipe.egg
eggs =
    pylint
    ${adhocracy:eggs}
initialization =
    from pylint import run_pylint
    sys.argv[1:1] = [
      '--output-format=colorized',
      '--zope=y'
      ]
entry-points =
    pylint_adhoc=pylint:run_pylint
# pylint is broken, we have set a custom entry point
scripts =
    pylint=pylint_original
    pylint_adhoc=pylint

[check_code]
recipe = collective.recipe.template
input = inline:
    #!/bin/bash

    # This script will always run all tests.
    # The return codes are collected in `ret_code`.
    ret_code=0

    ${buildout:bin-directory}/flake8 --ignore=N805,D101,D102 --exclude=bootstrap.py,conf.py,.svn,CVS,.bzr,.hg,.git,__pycache__,test_* --max-complexity=14 src/adhocracy/adhocracy src/adhocracy_sample/adhocracy_sample
    ret_code=$(($ret_code + $?))

    ${buildout:bin-directory}/scss-lint -c ${buildout:directory}/etc/scss-lint.yml ${buildout:directory}/src/adhocracy/adhocracy/frontend/static/stylesheets/scss/**
    ret_code=$(($ret_code + $?))

    while read line; do
        ${buildout:bin-directory}/tslint -c ${buildout:directory}/etc/tslint.json -f "$line"
        ret_code=$(($ret_code + $?))
    done < <(git diff --staged --name-only | grep \\.ts$)

    exit $ret_code
output = ${buildout:bin-directory}/check_code
mode = 755

[remove_double_quotes_in_python_files]
recipe = collective.recipe.template
input = inline:
    #!/bin/bash
    find $1 -name "*.py" | grep -v "bootstrap.py\|conf.py" | xargs sed -i "s/\"\"\"/3QUOTEMARKER/g"
    find $1 -name "*.py" | grep -v "bootstrap.py\|conf.py" | xargs sed -i "s/\"/\'/g"
    find $1 -name "*.py" | grep -v "bootstrap.py\|conf.py" | xargs sed -i "s/3QUOTEMARKER/\"\"\"/g"
output = ${buildout:bin-directory}/remove_double_quotes_in_python_files
mode = 755

[show_forbbiden_imports]
recipe = collective.recipe.template
input = inline:
    #!/bin/bash
    BASE_PACKAGES='\.interfaces|\.events|\.utils|\.graph|\.schema'
    grep -r "from adhocracy" src/adhocracy/adhocracy/rest  | grep -v "\.rest" | egrep -v -i $BASE_PACKAGES
    grep -r "from adhocracy" src/adhocracy/adhocracy/registry  | grep -v "\.registry" | egrep -v -i $BASE_PACKAGES
    grep -r "from adhocracy" src/adhocracy/adhocracy/sheets  | grep -v "\.sheets" | egrep -v -i $BASE_PACKAGES
    grep -r "from adhocracy" src/adhocracy/adhocracy/resources  | grep -v "\.resources" | egrep -v -i $BASE_PACKAGES
    grep -r "from adhocracy" src/adhocracy/adhocracy/subscriber  | grep -v "\.subcriber" | egrep -v -i $BASE_PACKAGES
    grep -r "from adhocracy" src/adhocracy/adhocracy/evolution  | grep -v "\.evolution" | egrep -v -i $BASE_PACKAGES
    grep -r "from adhocracy" src/adhocracy/adhocracy/folder  | grep -v "\.folder" | egrep -v -i $BASE_PACKAGES
    grep -r "from adhocracy" src/adhocracy/adhocracy/graph  | grep -v "\.graph" | egrep -v -i $BASE_PACKAGES
    grep -r "from adhocracy" src/adhocracy/adhocracy/schema  | grep -v "\.schema" | egrep -v -i $BASE_PACKAGES
    grep -r "from adhocracy" src/adhocracy/adhocracy/utils  | grep -v "\.utils" | egrep -v -i $BASE_PACKAGES
    grep -r "from adhocracy" src/adhocracy/adhocracy/events  | grep -v "\.utils" | egrep -v -i $BASE_PACKAGES
output = ${buildout:bin-directory}/show_forbbiden_imports
mode = 755

[pre_commit_hook]
recipe = collective.recipe.template
input = inline:
    #!/bin/sh

    #check_code
        echo "\n\n"
        echo "Code validation pre commit hook: bin/check_code\n"
        echo "To disable run git commit --no-verify ... .\n\n"
        exec bin/check_code
output = ${buildout:directory}/.git/hooks/pre-commit
mode = 755

[nodejs]
recipe = gp.recipe.node
version = 0.10.21
npms = typescript tslint # FIXME: must be version 0.9.5-0.  how do i enforce this?
# a list of extra directory to add to NODE_PATH
#node-path =
scripts = tsc node tslint

[supervisor]
#not python 3 compatible
recipe = zc.recipe.egg
dependent-scripts = true
eggs = supervisor


[rubygems]
recipe = rubygemsrecipe
gems =
    sass==3.3.8
    compass==1.0.0.alpha.19
    hologram==1.1.0
    scss-lint==0.24.1

[compass]
recipe = collective.recipe.template
input = ${buildout:directory}/etc/compass.rb.in
output = ${buildout:directory}/etc/compass.rb

[compass.min]
recipe = collective.recipe.template
input = ${buildout:directory}/etc/compass.min.rb.in
output = ${buildout:directory}/etc/compass.min.rb

[stylesheets]
recipe = plone.recipe.command
command =
    ${buildout:bin-directory}/compass compile --force -c ${buildout:directory}/etc/compass.rb
    ${buildout:bin-directory}/compass compile --force -c ${buildout:directory}/etc/compass.min.rb
update-command = ${stylesheets:command}

[hologram]
recipe = collective.recipe.template
input = ${buildout:directory}/etc/hologram.yml.in
output = ${buildout:directory}/etc/hologram.yml
mode = 644

[styleguide]
recipe = plone.recipe.command
command =
    ${buildout:bin-directory}/hologram ${hologram:output}
update-command = ${styleguide:command}
